#!/usr/bin/env php
<?php

require_once __DIR__ . '/vendor/autoload.php';
 
use Symfony\Component\Console\Application;

class Console extends Application  {
	
	public $dir = __DIR__;
	
	public $namespace = 'CH';

	public $paths;
	
	private $path = 'src/Commands/';

	private $version;

	private $name = 'Antonella Framework for WordPress';
	
	function __construct() {
		$ver = $this->readVersion();
		parent::__construct($this->name, $ver);
		$this->namespace = $this->readNamespace();
		$this->paths = [
            'controllers' => $this->dir.'/src/Controllers',
            'widgets' => $this->dir.'/src/Widgets',
            'helpers' => $this->dir.'/src/Helpers',
            'classes' => $this->dir.'/src/Classes',
            'blocks' => $this->dir.'/components',
            'stubs' => $this->dir.'/stubs',
            'config' => $this->dir.'/src/Config.php',
            'gutenberg' => $this->dir.'/src/Gutenberg.php',
        ];
		
		// cargamos todos los commandos
		$this->loadCommands();
	}
	
	public function loadCommands() {
		$pattern = sprintf('%s/*.php', $this->path);
		
		foreach (glob($pattern) as $file) {
			// devuelve el nombre de la clase sin .php
			$name = explode('.', array_reverse(explode('/', str_replace('\\', '/', $file)))[0])[0];
			$className = sprintf('%s\\Commands\\%s', $this->namespace, $name);
			parent::add( new  $className());
		}
	}
	
	/** functiones privadas */
	private function readNamespace() {
		$composer = file_get_contents($this->dir.'/composer.json');
        $composer_json = json_decode($composer);
        $psr = $composer_json->autoload->{'psr-4'};
        $namespace = substr(key($psr), 0, -1);

        return $namespace;
	}
	private function readVersion() {
		$composer = file_get_contents($this->dir.'/composer.json');
        $composer_json = json_decode($composer);
        $version = $composer_json->version;

        return $version;
	}
	public function getPath($dir, $file = '')
    {
        $dir = strtolower($dir);

        switch ($dir) {
            case 'stubs':
                $ext = '.stub';
                break;
            default:
                $ext = '.php';
        }

        return
            !empty($file) ?
                str_replace('\\', '/', $this->paths[strtolower($dir)].'/'.$file.$ext) :
                    str_replace('\\', '/', $this->paths[strtolower($dir)]);
    }	
}

$app = new Console();
$app->run();