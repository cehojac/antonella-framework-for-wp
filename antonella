#!/usr/bin/env php
<?php

require_once __DIR__ . '/vendor/autoload.php';
 
use Symfony\Component\Console\Application;

class Console extends Application  {
	
	public static $dir = __DIR__;
	
	private $namespace;

	private $path = 'dev/Commands';

	private $name = 'Antonella Framework for WordPress';
	
	function __construct() {
		$ver = $this->readVersion();
		parent::__construct($this->name, $ver);
		$this->namespace = 'Dev'; 
		// cargamos todos los commandos
		$this->loadCommands();
	}
	
	/** Carga todos los comandos */
	public function loadCommands() {
		$pattern = sprintf('%s/*.php', $this->path);
		
		$exclude = ['BaseCommand'];
		
		foreach (glob($pattern) as $file) {
			// devuelve el nombre de la clase sin .php
			$name = explode('.', array_reverse(explode('/', str_replace('\\', '/', $file)))[0])[0];
			if ( !in_array($name, $exclude) ) {
				$className = sprintf('%s\\Commands\\%s', $this->namespace, $name);
				parent::add( new  $className());
			}
		}
	}
	
	/** devuelve el namspace desde composer.json */
	private function readNamespace() {
		$composer = file_get_contents(self::$dir.'/composer.json');
        $composer_json = json_decode($composer);
        $psr = $composer_json->autoload->{'psr-4'};
        $namespace = substr(key($psr), 0, -1);

        return $namespace;
	}
	
	/** devuelve la version leida desde composer.json */
	private function readVersion() {
		$composer = file_get_contents(self::$dir.'/composer.json');
        $composer_json = json_decode($composer);
        $version = $composer_json->version;

        return $version;
	}		
}

$app = new Console();
$app->run();